#include <cstdint>
#include <algorithm>
#include <utility>

#include "gloommaths.h"

namespace GloomMaths
{
	static const uint16_t camrots[256][4] = {
		{ 0x7FFE, 0x0000, 0x0000, 0x7FFE },
		{ 0x7FF4, 0xFCDC, 0x0323, 0x7FF4 },
		{ 0x7FD6, 0xF9B8, 0x0647, 0x7FD6 },
		{ 0x7FA5, 0xF695, 0x096A, 0x7FA5 },
		{ 0x7F60, 0xF374, 0x0C8B, 0x7F60 },
		{ 0x7F07, 0xF055, 0x0FAA, 0x7F07 },
		{ 0x7E9B, 0xED38, 0x12C7, 0x7E9B },
		{ 0x7E1B, 0xEA1E, 0x15E1, 0x7E1B },
		{ 0x7D88, 0xE707, 0x18F8, 0x7D88 },
		{ 0x7CE1, 0xE3F4, 0x1C0B, 0x7CE1 },
		{ 0x7C27, 0xE0E6, 0x1F19, 0x7C27 },
		{ 0x7B5B, 0xDDDD, 0x2222, 0x7B5B },
		{ 0x7A7B, 0xDAD8, 0x2527, 0x7A7B },
		{ 0x7988, 0xD7DA, 0x2825, 0x7988 },
		{ 0x7882, 0xD4E1, 0x2B1E, 0x7882 },
		{ 0x776A, 0xD1EF, 0x2E10, 0x776A },
		{ 0x763F, 0xCF05, 0x30FA, 0x763F },
		{ 0x7502, 0xCC22, 0x33DD, 0x7502 },
		{ 0x73B3, 0xC946, 0x36B9, 0x73B3 },
		{ 0x7253, 0xC674, 0x398B, 0x7253 },
		{ 0x70E0, 0xC3AA, 0x3C55, 0x70E0 },
		{ 0x6F5D, 0xC0E9, 0x3F16, 0x6F5D },
		{ 0x6DC8, 0xBE33, 0x41CC, 0x6DC8 },
		{ 0x6C22, 0xBB86, 0x4479, 0x6C22 },
		{ 0x6A6B, 0xB8E4, 0x471B, 0x6A6B },
		{ 0x68A4, 0xB64D, 0x49B2, 0x68A4 },
		{ 0x66CD, 0xB3C1, 0x4C3E, 0x66CD },
		{ 0x64E6, 0xB141, 0x4EBE, 0x64E6 },
		{ 0x62F0, 0xAECD, 0x5132, 0x62F0 },
		{ 0x60EA, 0xAC66, 0x5399, 0x60EA },
		{ 0x5ED5, 0xAA0B, 0x55F4, 0x5ED5 },
		{ 0x5CB2, 0xA7BE, 0x5841, 0x5CB2 },
		{ 0x5A80, 0xA57F, 0x5A80, 0x5A80 },
		{ 0x5841, 0xA34D, 0x5CB2, 0x5841 },
		{ 0x55F4, 0xA12A, 0x5ED5, 0x55F4 },
		{ 0x5399, 0x9F15, 0x60EA, 0x5399 },
		{ 0x5132, 0x9D0F, 0x62F0, 0x5132 },
		{ 0x4EBE, 0x9B19, 0x64E6, 0x4EBE },
		{ 0x4C3E, 0x9932, 0x66CD, 0x4C3E },
		{ 0x49B2, 0x975B, 0x68A4, 0x49B2 },
		{ 0x471B, 0x9594, 0x6A6B, 0x471B },
		{ 0x4479, 0x93DD, 0x6C22, 0x4479 },
		{ 0x41CC, 0x9237, 0x6DC8, 0x41CC },
		{ 0x3F16, 0x90A2, 0x6F5D, 0x3F16 },
		{ 0x3C55, 0x8F1F, 0x70E0, 0x3C55 },
		{ 0x398B, 0x8DAC, 0x7253, 0x398B },
		{ 0x36B9, 0x8C4C, 0x73B3, 0x36B9 },
		{ 0x33DD, 0x8AFD, 0x7502, 0x33DD },
		{ 0x30FA, 0x89C0, 0x763F, 0x30FA },
		{ 0x2E10, 0x8895, 0x776A, 0x2E10 },
		{ 0x2B1E, 0x877D, 0x7882, 0x2B1E },
		{ 0x2825, 0x8677, 0x7988, 0x2825 },
		{ 0x2527, 0x8584, 0x7A7B, 0x2527 },
		{ 0x2222, 0x84A4, 0x7B5B, 0x2222 },
		{ 0x1F19, 0x83D8, 0x7C27, 0x1F19 },
		{ 0x1C0B, 0x831E, 0x7CE1, 0x1C0B },
		{ 0x18F8, 0x8277, 0x7D88, 0x18F8 },
		{ 0x15E1, 0x81E4, 0x7E1B, 0x15E1 },
		{ 0x12C7, 0x8164, 0x7E9B, 0x12C7 },
		{ 0x0FAA, 0x80F8, 0x7F07, 0x0FAA },
		{ 0x0C8B, 0x809F, 0x7F60, 0x0C8B },
		{ 0x096A, 0x805A, 0x7FA5, 0x096A },
		{ 0x0647, 0x8029, 0x7FD6, 0x0647 },
		{ 0x0323, 0x800B, 0x7FF4, 0x0323 },
		{ 0x0000, 0x8002, 0x7FFE, 0x0000 },
		{ 0xFCDC, 0x800B, 0x7FF4, 0xFCDC },
		{ 0xF9B8, 0x8029, 0x7FD6, 0xF9B8 },
		{ 0xF695, 0x805A, 0x7FA5, 0xF695 },
		{ 0xF374, 0x809F, 0x7F60, 0xF374 },
		{ 0xF055, 0x80F8, 0x7F07, 0xF055 },
		{ 0xED38, 0x8164, 0x7E9B, 0xED38 },
		{ 0xEA1E, 0x81E4, 0x7E1B, 0xEA1E },
		{ 0xE707, 0x8277, 0x7D88, 0xE707 },
		{ 0xE3F4, 0x831E, 0x7CE1, 0xE3F4 },
		{ 0xE0E6, 0x83D8, 0x7C27, 0xE0E6 },
		{ 0xDDDD, 0x84A4, 0x7B5B, 0xDDDD },
		{ 0xDAD8, 0x8584, 0x7A7B, 0xDAD8 },
		{ 0xD7DA, 0x8677, 0x7988, 0xD7DA },
		{ 0xD4E1, 0x877D, 0x7882, 0xD4E1 },
		{ 0xD1EF, 0x8895, 0x776A, 0xD1EF },
		{ 0xCF05, 0x89C0, 0x763F, 0xCF05 },
		{ 0xCC22, 0x8AFD, 0x7502, 0xCC22 },
		{ 0xC946, 0x8C4C, 0x73B3, 0xC946 },
		{ 0xC674, 0x8DAC, 0x7253, 0xC674 },
		{ 0xC3AA, 0x8F1F, 0x70E0, 0xC3AA },
		{ 0xC0E9, 0x90A2, 0x6F5D, 0xC0E9 },
		{ 0xBE33, 0x9237, 0x6DC8, 0xBE33 },
		{ 0xBB86, 0x93DD, 0x6C22, 0xBB86 },
		{ 0xB8E4, 0x9594, 0x6A6B, 0xB8E4 },
		{ 0xB64D, 0x975B, 0x68A4, 0xB64D },
		{ 0xB3C1, 0x9932, 0x66CD, 0xB3C1 },
		{ 0xB141, 0x9B19, 0x64E6, 0xB141 },
		{ 0xAECD, 0x9D0F, 0x62F0, 0xAECD },
		{ 0xAC66, 0x9F15, 0x60EA, 0xAC66 },
		{ 0xAA0B, 0xA12A, 0x5ED5, 0xAA0B },
		{ 0xA7BE, 0xA34D, 0x5CB2, 0xA7BE },
		{ 0xA57F, 0xA57F, 0x5A80, 0xA57F },
		{ 0xA34D, 0xA7BE, 0x5841, 0xA34D },
		{ 0xA12A, 0xAA0B, 0x55F4, 0xA12A },
		{ 0x9F15, 0xAC66, 0x5399, 0x9F15 },
		{ 0x9D0F, 0xAECD, 0x5132, 0x9D0F },
		{ 0x9B19, 0xB141, 0x4EBE, 0x9B19 },
		{ 0x9932, 0xB3C1, 0x4C3E, 0x9932 },
		{ 0x975B, 0xB64D, 0x49B2, 0x975B },
		{ 0x9594, 0xB8E4, 0x471B, 0x9594 },
		{ 0x93DD, 0xBB86, 0x4479, 0x93DD },
		{ 0x9237, 0xBE33, 0x41CC, 0x9237 },
		{ 0x90A2, 0xC0E9, 0x3F16, 0x90A2 },
		{ 0x8F1F, 0xC3AA, 0x3C55, 0x8F1F },
		{ 0x8DAC, 0xC674, 0x398B, 0x8DAC },
		{ 0x8C4C, 0xC946, 0x36B9, 0x8C4C },
		{ 0x8AFD, 0xCC22, 0x33DD, 0x8AFD },
		{ 0x89C0, 0xCF05, 0x30FA, 0x89C0 },
		{ 0x8895, 0xD1EF, 0x2E10, 0x8895 },
		{ 0x877D, 0xD4E1, 0x2B1E, 0x877D },
		{ 0x8677, 0xD7DA, 0x2825, 0x8677 },
		{ 0x8584, 0xDAD8, 0x2527, 0x8584 },
		{ 0x84A4, 0xDDDD, 0x2222, 0x84A4 },
		{ 0x83D8, 0xE0E6, 0x1F19, 0x83D8 },
		{ 0x831E, 0xE3F4, 0x1C0B, 0x831E },
		{ 0x8277, 0xE707, 0x18F8, 0x8277 },
		{ 0x81E4, 0xEA1E, 0x15E1, 0x81E4 },
		{ 0x8164, 0xED38, 0x12C7, 0x8164 },
		{ 0x80F8, 0xF055, 0x0FAA, 0x80F8 },
		{ 0x809F, 0xF374, 0x0C8B, 0x809F },
		{ 0x805A, 0xF695, 0x096A, 0x805A },
		{ 0x8029, 0xF9B8, 0x0647, 0x8029 },
		{ 0x800B, 0xFCDC, 0x0323, 0x800B },
		{ 0x8002, 0x0000, 0x0000, 0x8002 },
		{ 0x800B, 0x0323, 0xFCDC, 0x800B },
		{ 0x8029, 0x0647, 0xF9B8, 0x8029 },
		{ 0x805A, 0x096A, 0xF695, 0x805A },
		{ 0x809F, 0x0C8B, 0xF374, 0x809F },
		{ 0x80F8, 0x0FAA, 0xF055, 0x80F8 },
		{ 0x8164, 0x12C7, 0xED38, 0x8164 },
		{ 0x81E4, 0x15E1, 0xEA1E, 0x81E4 },
		{ 0x8277, 0x18F8, 0xE707, 0x8277 },
		{ 0x831E, 0x1C0B, 0xE3F4, 0x831E },
		{ 0x83D8, 0x1F19, 0xE0E6, 0x83D8 },
		{ 0x84A4, 0x2222, 0xDDDD, 0x84A4 },
		{ 0x8584, 0x2527, 0xDAD8, 0x8584 },
		{ 0x8677, 0x2825, 0xD7DA, 0x8677 },
		{ 0x877D, 0x2B1E, 0xD4E1, 0x877D },
		{ 0x8895, 0x2E10, 0xD1EF, 0x8895 },
		{ 0x89C0, 0x30FA, 0xCF05, 0x89C0 },
		{ 0x8AFD, 0x33DD, 0xCC22, 0x8AFD },
		{ 0x8C4C, 0x36B9, 0xC946, 0x8C4C },
		{ 0x8DAC, 0x398B, 0xC674, 0x8DAC },
		{ 0x8F1F, 0x3C55, 0xC3AA, 0x8F1F },
		{ 0x90A2, 0x3F16, 0xC0E9, 0x90A2 },
		{ 0x9237, 0x41CC, 0xBE33, 0x9237 },
		{ 0x93DD, 0x4479, 0xBB86, 0x93DD },
		{ 0x9594, 0x471B, 0xB8E4, 0x9594 },
		{ 0x975B, 0x49B2, 0xB64D, 0x975B },
		{ 0x9932, 0x4C3E, 0xB3C1, 0x9932 },
		{ 0x9B19, 0x4EBE, 0xB141, 0x9B19 },
		{ 0x9D0F, 0x5132, 0xAECD, 0x9D0F },
		{ 0x9F15, 0x5399, 0xAC66, 0x9F15 },
		{ 0xA12A, 0x55F4, 0xAA0B, 0xA12A },
		{ 0xA34D, 0x5841, 0xA7BE, 0xA34D },
		{ 0xA57F, 0x5A80, 0xA57F, 0xA57F },
		{ 0xA7BE, 0x5CB2, 0xA34D, 0xA7BE },
		{ 0xAA0B, 0x5ED5, 0xA12A, 0xAA0B },
		{ 0xAC66, 0x60EA, 0x9F15, 0xAC66 },
		{ 0xAECD, 0x62F0, 0x9D0F, 0xAECD },
		{ 0xB141, 0x64E6, 0x9B19, 0xB141 },
		{ 0xB3C1, 0x66CD, 0x9932, 0xB3C1 },
		{ 0xB64D, 0x68A4, 0x975B, 0xB64D },
		{ 0xB8E4, 0x6A6B, 0x9594, 0xB8E4 },
		{ 0xBB86, 0x6C22, 0x93DD, 0xBB86 },
		{ 0xBE33, 0x6DC8, 0x9237, 0xBE33 },
		{ 0xC0E9, 0x6F5D, 0x90A2, 0xC0E9 },
		{ 0xC3AA, 0x70E0, 0x8F1F, 0xC3AA },
		{ 0xC674, 0x7253, 0x8DAC, 0xC674 },
		{ 0xC946, 0x73B3, 0x8C4C, 0xC946 },
		{ 0xCC22, 0x7502, 0x8AFD, 0xCC22 },
		{ 0xCF05, 0x763F, 0x89C0, 0xCF05 },
		{ 0xD1EF, 0x776A, 0x8895, 0xD1EF },
		{ 0xD4E1, 0x7882, 0x877D, 0xD4E1 },
		{ 0xD7DA, 0x7988, 0x8677, 0xD7DA },
		{ 0xDAD8, 0x7A7B, 0x8584, 0xDAD8 },
		{ 0xDDDD, 0x7B5B, 0x84A4, 0xDDDD },
		{ 0xE0E6, 0x7C27, 0x83D8, 0xE0E6 },
		{ 0xE3F4, 0x7CE1, 0x831E, 0xE3F4 },
		{ 0xE707, 0x7D88, 0x8277, 0xE707 },
		{ 0xEA1E, 0x7E1B, 0x81E4, 0xEA1E },
		{ 0xED38, 0x7E9B, 0x8164, 0xED38 },
		{ 0xF055, 0x7F07, 0x80F8, 0xF055 },
		{ 0xF374, 0x7F60, 0x809F, 0xF374 },
		{ 0xF695, 0x7FA5, 0x805A, 0xF695 },
		{ 0xF9B8, 0x7FD6, 0x8029, 0xF9B8 },
		{ 0xFCDC, 0x7FF4, 0x800B, 0xFCDC },
		{ 0x0000, 0x7FFE, 0x8002, 0x0000 },
		{ 0x0323, 0x7FF4, 0x800B, 0x0323 },
		{ 0x0647, 0x7FD6, 0x8029, 0x0647 },
		{ 0x096A, 0x7FA5, 0x805A, 0x096A },
		{ 0x0C8B, 0x7F60, 0x809F, 0x0C8B },
		{ 0x0FAA, 0x7F07, 0x80F8, 0x0FAA },
		{ 0x12C7, 0x7E9B, 0x8164, 0x12C7 },
		{ 0x15E1, 0x7E1B, 0x81E4, 0x15E1 },
		{ 0x18F8, 0x7D88, 0x8277, 0x18F8 },
		{ 0x1C0A, 0x7CE1, 0x831E, 0x1C0A },
		{ 0x1F19, 0x7C27, 0x83D8, 0x1F19 },
		{ 0x2222, 0x7B5B, 0x84A4, 0x2222 },
		{ 0x2527, 0x7A7B, 0x8584, 0x2527 },
		{ 0x2825, 0x7988, 0x8677, 0x2825 },
		{ 0x2B1E, 0x7882, 0x877D, 0x2B1E },
		{ 0x2E10, 0x776A, 0x8895, 0x2E10 },
		{ 0x30FA, 0x763F, 0x89C0, 0x30FA },
		{ 0x33DD, 0x7502, 0x8AFD, 0x33DD },
		{ 0x36B9, 0x73B3, 0x8C4C, 0x36B9 },
		{ 0x398B, 0x7253, 0x8DAC, 0x398B },
		{ 0x3C55, 0x70E0, 0x8F1F, 0x3C55 },
		{ 0x3F16, 0x6F5D, 0x90A2, 0x3F16 },
		{ 0x41CC, 0x6DC8, 0x9237, 0x41CC },
		{ 0x4479, 0x6C22, 0x93DD, 0x4479 },
		{ 0x471B, 0x6A6B, 0x9594, 0x471B },
		{ 0x49B2, 0x68A4, 0x975B, 0x49B2 },
		{ 0x4C3E, 0x66CD, 0x9932, 0x4C3E },
		{ 0x4EBE, 0x64E6, 0x9B19, 0x4EBE },
		{ 0x5132, 0x62F0, 0x9D0F, 0x5132 },
		{ 0x5399, 0x60EA, 0x9F15, 0x5399 },
		{ 0x55F4, 0x5ED5, 0xA12A, 0x55F4 },
		{ 0x5841, 0x5CB2, 0xA34D, 0x5841 },
		{ 0x5A80, 0x5A80, 0xA57F, 0x5A80 },
		{ 0x5CB2, 0x5841, 0xA7BE, 0x5CB2 },
		{ 0x5ED5, 0x55F4, 0xAA0B, 0x5ED5 },
		{ 0x60EA, 0x5399, 0xAC66, 0x60EA },
		{ 0x62EF, 0x5132, 0xAECD, 0x62EF },
		{ 0x64E6, 0x4EBE, 0xB141, 0x64E6 },
		{ 0x66CD, 0x4C3E, 0xB3C1, 0x66CD },
		{ 0x68A4, 0x49B2, 0xB64D, 0x68A4 },
		{ 0x6A6B, 0x471B, 0xB8E4, 0x6A6B },
		{ 0x6C22, 0x4479, 0xBB86, 0x6C22 },
		{ 0x6DC8, 0x41CC, 0xBE33, 0x6DC8 },
		{ 0x6F5D, 0x3F16, 0xC0E9, 0x6F5D },
		{ 0x70E0, 0x3C55, 0xC3AA, 0x70E0 },
		{ 0x7253, 0x398B, 0xC674, 0x7253 },
		{ 0x73B3, 0x36B9, 0xC946, 0x73B3 },
		{ 0x7502, 0x33DD, 0xCC22, 0x7502 },
		{ 0x763F, 0x30FA, 0xCF05, 0x763F },
		{ 0x776A, 0x2E10, 0xD1EF, 0x776A },
		{ 0x7882, 0x2B1E, 0xD4E1, 0x7882 },
		{ 0x7988, 0x2825, 0xD7DA, 0x7988 },
		{ 0x7A7B, 0x2527, 0xDAD8, 0x7A7B },
		{ 0x7B5B, 0x2222, 0xDDDD, 0x7B5B },
		{ 0x7C27, 0x1F19, 0xE0E6, 0x7C27 },
		{ 0x7CE1, 0x1C0B, 0xE3F4, 0x7CE1 },
		{ 0x7D88, 0x18F8, 0xE707, 0x7D88 },
		{ 0x7E1B, 0x15E1, 0xEA1E, 0x7E1B },
		{ 0x7E9B, 0x12C7, 0xED38, 0x7E9B },
		{ 0x7F07, 0x0FAA, 0xF055, 0x7F07 },
		{ 0x7F60, 0x0C8B, 0xF374, 0x7F60 },
		{ 0x7FA5, 0x096A, 0xF695, 0x7FA5 },
		{ 0x7FD6, 0x0647, 0xF9B8, 0x7FD6 },
		{ 0x7FF4, 0x0323, 0xFCDC, 0x7FF4 } };

	void GetCamRot(uint8_t ang, Quick result[4])
	{
		for (auto i = 0; i < 4; i++)
		{
			// these appear to have been shifted down by one (sign extension/overflow reasons?) compared to a Blitz quick
			// there's a lot of 'add d0, d0' in the code to compensate, possibly
			int32_t val = camrots[ang][i] << 1;
			if (val & 0x10000) val |= 0xFFFF0000;
			result[i].SetVal(val);
		}
	}

	static uint16_t randomtable[55];
	static int16_t j_index;
	static int16_t k_index;

	void SeedRnd(uint16_t seed)
	{
		/*
		seedrnd; seed number in d0.w
			;
			moveq	#54, d1
			lea	rndtable(pc), a0
			;
		.loop	move	d0, (a0)+
			mulu	#$1efd, d0
			add	#$dff, d0
			dbf	d1, .loop
			;
			move.l	a0, k_index
			move.l	#rndtable + 48, j_index
			rts
		*/

		for (int i = 0; i < 55; i++)
		{
			randomtable[i] = seed;
			seed *= 0x1efd;
			seed += 0xdff;
		}

		k_index = 55;
		j_index = 24;
	}

	uint16_t RndW()
	{
		/*
		rndw; return rnd number 0...65535 in d0.w
			;
			movem.l	a0 / a1, -(a7)
			lea	rndtable(pc), a1
			move.l	j_index(pc), a0
			move -(a0), d0
			cmp.l	a0, a1
			bne.s.skip
			lea	rndtable + 110(pc), a0
		.skip	move.l	a0, j_index
			move.l	k_index(pc), a0
			add -(a0), d0
			move	d0, (a0)
			cmp.l	a0, a1
			bne.s.skip2
			lea	rndtable + 110(pc), a0
		.skip2	move.l	a0, k_index
			movem.l(a7) + , a0 / a1
			rts
		*/

		uint16_t r = randomtable[--j_index];

		if (j_index == 0) j_index = 55;

		r += randomtable[--k_index];
		randomtable[k_index] = r;

		if (k_index == 0) k_index = 55;

		return r;
	}

	static const uint16_t arctable[] =
	{
		0x0000, 0x0014, 0x0028, 0x003D, 0x0051, 0x0065, 0x007A, 0x008E, 0x00A2, 0x00B7, 0x00CB, 0x00E0, 0x00F4, 0x0108, 0x011D, 0x0131,
		0x0145, 0x015A, 0x016E, 0x0182, 0x0197, 0x01AB, 0x01BF, 0x01D4, 0x01E8, 0x01FC, 0x0211, 0x0225, 0x0239, 0x024E, 0x0262, 0x0276,
		0x028A, 0x029F, 0x02B3, 0x02C7, 0x02DC, 0x02F0, 0x0304, 0x0318, 0x032D, 0x0341, 0x0355, 0x0369, 0x037E, 0x0392, 0x03A6, 0x03BA,
		0x03CE, 0x03E3, 0x03F7, 0x040B, 0x041F, 0x0433, 0x0447, 0x045C, 0x0470, 0x0484, 0x0498, 0x04AC, 0x04C0, 0x04D4, 0x04E8, 0x04FC,
		0x0510, 0x0524, 0x0539, 0x054D, 0x0561, 0x0575, 0x0589, 0x059D, 0x05B1, 0x05C5, 0x05D8, 0x05EC, 0x0600, 0x0614, 0x0628, 0x063C,
		0x0650, 0x0664, 0x0678, 0x068C, 0x069F, 0x06B3, 0x06C7, 0x06DB, 0x06EF, 0x0702, 0x0716, 0x072A, 0x073E, 0x0751, 0x0765, 0x0779,
		0x078D, 0x07A0, 0x07B4, 0x07C7, 0x07DB, 0x07EF, 0x0802, 0x0816, 0x0829, 0x083D, 0x0851, 0x0864, 0x0878, 0x088B, 0x089F, 0x08B2,
		0x08C5, 0x08D9, 0x08EC, 0x0900, 0x0913, 0x0926, 0x093A, 0x094D, 0x0960, 0x0974, 0x0987, 0x099A, 0x09AE, 0x09C1, 0x09D4, 0x09E7,
		0x09FA, 0x0A0E, 0x0A21, 0x0A34, 0x0A47, 0x0A5A, 0x0A6D, 0x0A80, 0x0A93, 0x0AA6, 0x0AB9, 0x0ACC, 0x0ADF, 0x0AF2, 0x0B05, 0x0B18,
		0x0B2B, 0x0B3E, 0x0B51, 0x0B63, 0x0B76, 0x0B89, 0x0B9C, 0x0BAE, 0x0BC1, 0x0BD4, 0x0BE7, 0x0BF9, 0x0C0C, 0x0C1F, 0x0C31, 0x0C44,
		0x0C56, 0x0C69, 0x0C7B, 0x0C8E, 0x0CA0, 0x0CB3, 0x0CC5, 0x0CD8, 0x0CEA, 0x0CFC, 0x0D0F, 0x0D21, 0x0D33, 0x0D46, 0x0D58, 0x0D6A,
		0x0D7D, 0x0D8F, 0x0DA1, 0x0DB3, 0x0DC5, 0x0DD7, 0x0DE9, 0x0DFC, 0x0E0E, 0x0E20, 0x0E32, 0x0E44, 0x0E56, 0x0E67, 0x0E79, 0x0E8B,
		0x0E9D, 0x0EAF, 0x0EC1, 0x0ED3, 0x0EE4, 0x0EF6, 0x0F08, 0x0F1A, 0x0F2B, 0x0F3D, 0x0F4F, 0x0F60, 0x0F72, 0x0F83, 0x0F95, 0x0FA6,
		0x0FB8, 0x0FC9, 0x0FDB, 0x0FEC, 0x0FFE, 0x100F, 0x1020, 0x1032, 0x1043, 0x1054, 0x1066, 0x1077, 0x1088, 0x1099, 0x10AA, 0x10BB,
		0x10CD, 0x10DE, 0x10EF, 0x1100, 0x1111, 0x1122, 0x1133, 0x1144, 0x1155, 0x1165, 0x1176, 0x1187, 0x1198, 0x11A9, 0x11BA, 0x11CA,
		0x11DB, 0x11EC, 0x11FC, 0x120D, 0x121E, 0x122E, 0x123F, 0x124F, 0x1260, 0x1270, 0x1281, 0x1291, 0x12A2, 0x12B2, 0x12C2, 0x12D3,
		0x12E3, 0x12F3, 0x1303, 0x1314, 0x1324, 0x1334, 0x1344, 0x1354, 0x1364, 0x1375, 0x1385, 0x1395, 0x13A5, 0x13B5, 0x13C5, 0x13D4,
		0x13E4, 0x13F4, 0x1404, 0x1414, 0x1424, 0x1433, 0x1443, 0x1453, 0x1463, 0x1472, 0x1482, 0x1492, 0x14A1, 0x14B1, 0x14C0, 0x14D0,
		0x14DF, 0x14EF, 0x14FE, 0x150E, 0x151D, 0x152C, 0x153C, 0x154B, 0x155A, 0x1569, 0x1579, 0x1588, 0x1597, 0x15A6, 0x15B5, 0x15C4,
		0x15D4, 0x15E3, 0x15F2, 0x1601, 0x1610, 0x161F, 0x162D, 0x163C, 0x164B, 0x165A, 0x1669, 0x1678, 0x1686, 0x1695, 0x16A4, 0x16B3,
		0x16C1, 0x16D0, 0x16DE, 0x16ED, 0x16FC, 0x170A, 0x1719, 0x1727, 0x1736, 0x1744, 0x1752, 0x1761, 0x176F, 0x177D, 0x178C, 0x179A,
		0x17A8, 0x17B6, 0x17C5, 0x17D3, 0x17E1, 0x17EF, 0x17FD, 0x180B, 0x1819, 0x1827, 0x1835, 0x1843, 0x1851, 0x185F, 0x186D, 0x187B,
		0x1889, 0x1897, 0x18A4, 0x18B2, 0x18C0, 0x18CE, 0x18DB, 0x18E9, 0x18F7, 0x1904, 0x1912, 0x191F, 0x192D, 0x193B, 0x1948, 0x1955,
		0x1963, 0x1970, 0x197E, 0x198B, 0x1998, 0x19A6, 0x19B3, 0x19C0, 0x19CE, 0x19DB, 0x19E8, 0x19F5, 0x1A02, 0x1A0F, 0x1A1D, 0x1A2A,
		0x1A37, 0x1A44, 0x1A51, 0x1A5E, 0x1A6B, 0x1A78, 0x1A84, 0x1A91, 0x1A9E, 0x1AAB, 0x1AB8, 0x1AC5, 0x1AD1, 0x1ADE, 0x1AEB, 0x1AF7,
		0x1B04, 0x1B11, 0x1B1D, 0x1B2A, 0x1B37, 0x1B43, 0x1B50, 0x1B5C, 0x1B69, 0x1B75, 0x1B81, 0x1B8E, 0x1B9A, 0x1BA7, 0x1BB3, 0x1BBF,
		0x1BCB, 0x1BD8, 0x1BE4, 0x1BF0, 0x1BFC, 0x1C09, 0x1C15, 0x1C21, 0x1C2D, 0x1C39, 0x1C45, 0x1C51, 0x1C5D, 0x1C69, 0x1C75, 0x1C81,
		0x1C8D, 0x1C99, 0x1CA5, 0x1CB0, 0x1CBC, 0x1CC8, 0x1CD4, 0x1CE0, 0x1CEB, 0x1CF7, 0x1D03, 0x1D0E, 0x1D1A, 0x1D26, 0x1D31, 0x1D3D,
		0x1D48, 0x1D54, 0x1D5F, 0x1D6B, 0x1D76, 0x1D82, 0x1D8D, 0x1D98, 0x1DA4, 0x1DAF, 0x1DBB, 0x1DC6, 0x1DD1, 0x1DDC, 0x1DE8, 0x1DF3,
		0x1DFE, 0x1E09, 0x1E14, 0x1E1F, 0x1E2B, 0x1E36, 0x1E41, 0x1E4C, 0x1E57, 0x1E62, 0x1E6D, 0x1E78, 0x1E83, 0x1E8E, 0x1E98, 0x1EA3,
		0x1EAE, 0x1EB9, 0x1EC4, 0x1ECF, 0x1ED9, 0x1EE4, 0x1EEF, 0x1EFA, 0x1F04, 0x1F0F, 0x1F1A, 0x1F24, 0x1F2F, 0x1F39, 0x1F44, 0x1F4E,
		0x1F59, 0x1F63, 0x1F6E, 0x1F78, 0x1F83, 0x1F8D, 0x1F98, 0x1FA2, 0x1FAC, 0x1FB7, 0x1FC1, 0x1FCB, 0x1FD6, 0x1FE0, 0x1FEA, 0x1FF4
	};

	uint8_t CalcAngle(int32_t x1, int32_t z1, int32_t x2, int32_t z2)
	{
		const int32_t octtable[8] = { 0, 0x4000FFFF, 0x0000FFFF, 0xc0000000, 0x8000FFFF, 0x40000000, 0x80000000, 0xc000FFFF };

		///OCTTABLE INDEXED BY LONGS, IN BYTES IN THE ASSEMBLY BELOW, HENCE DIV BY 4

		/*
		calcangle_; d0.w = x d1.w = y(dest - src)!
			;
			moveq	#0, d2
			tst	d1
			bpl.s.hpos
			moveq	#16, d2
			neg	d1
			.hpos	tst	d0
			bpl.s.wpos
			eor	#8, d2
			neg	d0
		*/

		uint32_t oct = 0;
		x1 -= x2;
		z1 -= z2;

		if (z1 < 0)
		{
			oct = 4;
			z1 = -z1;
		}
		if (x1 < 0)
		{
			oct ^= 2;
			x1 = -x1;
		}

		/*
		.wpos	cmp	d1, d0
				bmi.s.notsteep
				bne.s.neq
				move	#$2000, d1
				bra.s.flow
		.neq	eor	#4, d2
				exg	d1, d0
		.notsteep	tst	d1
				bne.s.noflow
				moveq	#0, d1
				bra.s.flow
		.noflow	ext.l	d0
				swap	d0
				divu	d1, d0
				lsr	#6, d0
				and	#1022, d0
				move.arc(pc, d0), d1
		.flow	move.l.oct(pc, d2), d0
				eor	d0, d1
				swap	d0
				add	d1, d0
				lsr	#8, d0
				rts
				;
		*/

		if ((x1 - z1) < 0)
		{
			goto notsteep;
		}
		if (z1 == x1)
		{
			z1 = 0x2000;
			goto flow;
		}
		oct ^= 1;
		std::swap(x1, z1);
	notsteep:
		if (z1 != 0) goto noflow;
		z1 = 0;// isn't this superfluous? "if z1 = 0, set z1 to zero?"
		goto flow;
	noflow:
		x1 = (x1 << 16) | ((x1 >> 16)&0xFFFF);
		x1 = x1 / z1;
		x1 >>= 6;
		x1 &= 1022;
		z1 = arctable[x1 / 2];
	flow:
		x1 = octtable[oct];
		z1 ^= x1;
		x1 >>= 16;
		x1 += z1;
		x1 >>= 8;
		return x1 & 0xFF;
	}
}